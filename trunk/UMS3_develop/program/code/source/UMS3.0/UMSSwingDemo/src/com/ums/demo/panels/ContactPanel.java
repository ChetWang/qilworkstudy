/*
 * ContactPanel.java
 *
 * Created on 2007年11月5日, 下午10:48
 */
package com.ums.demo.panels;

import com.ums.autocomplete.DefaultCompletionFilter;
import com.ums.db.UMSConn;
import com.ums.demo.util.UUMBean;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author  Qil.Wong
 */
public class ContactPanel extends javax.swing.JPanel {

    private Vector<UUMBean> uumBeanList;
    private DefaultTableModel model;

    public ContactPanel(boolean dbFlag) {
        initComponents();
        addrTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        addrTable.getColumnModel().getColumn(1).setPreferredWidth(130);
        model = (DefaultTableModel) addrTable.getModel();
        if (dbFlag) {
            iniContact();
        }
    }

    private void iniContact() {
        Connection conn = null;
        setUUMBeanList(new Vector<UUMBean>());
        try {
            conn = DriverManager.getConnection(UMSConn.getPoolName());
            ResultSet rs = conn.createStatement().executeQuery("SELECT * FROM UUM_USER WHERE USER_SYSTEM_CODE = 'ums'");
            while (rs.next()) {
                UUMBean uum = new UUMBean(rs.getString("USER_NAME"), rs.getString("USER_EMAIL"), rs.getString("USER_MOBILE"));
                getUUMBeanList().add(uum);
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(ContactPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(ContactPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void showAddr(int showType) {
        clearTable();
        for (int i = 0; i < uumBeanList.size(); i++) {
            UUMBean uum = uumBeanList.get(i);
            uum.setShowType(showType);
            getModel().addRow(new Object[]{uum.getName(), uum});
        }
        getAutoCompletionField().setFilter(new DefaultCompletionFilter(uumBeanList));
    }

    public void clearTable() {
        for (int i = getModel().getRowCount(); i > 0; i--) {
            getModel().removeRow(i - 1);
        }
        getAutoCompletionField().setFilter(new DefaultCompletionFilter());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddressTypeCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addrTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        autoCompletionField = new com.ums.autocomplete.AutoCompletionField();

        AddressTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Choose--", "Mobile", "Email", "LCS" }));

        jLabel1.setText("Address Type:");

        addrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(addrTable);

        addBtn.setText("Add");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(9, 9, 9)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(AddressTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(autoCompletionField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jScrollPane1, 0, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(AddressTypeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addBtn)
                    .add(autoCompletionField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AddressTypeCombo;
    private javax.swing.JButton addBtn;
    private javax.swing.JTable addrTable;
    private com.ums.autocomplete.AutoCompletionField autoCompletionField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    public Vector<UUMBean> getUUMBeanList() {
        return uumBeanList;
    }

    public void setUUMBeanList(Vector<UUMBean> UUMBeanList) {
        this.uumBeanList = UUMBeanList;
    }

    public DefaultTableModel getModel() {
        return model;
    }

    public void setModel(DefaultTableModel model) {
        this.model = model;
    }

    public javax.swing.JButton getAddBtn() {
        return addBtn;
    }

    public void setAddBtn(javax.swing.JButton addBtn) {
        this.addBtn = addBtn;
    }

    public javax.swing.JTable getAddrTable() {
        return addrTable;
    }

    public void setAddrTable(javax.swing.JTable addrTable) {
        this.addrTable = addrTable;
    }

    public com.ums.autocomplete.AutoCompletionField getAutoCompletionField() {
        return autoCompletionField;
    }

    public void setAutoCompletionField(com.ums.autocomplete.AutoCompletionField autoCompletionField) {
        this.autoCompletionField = autoCompletionField;
    }

    public javax.swing.JComboBox getAddressTypeCombo() {
        return AddressTypeCombo;
    }

    public void setAddressTypeCombo(javax.swing.JComboBox AddressTypeCombo) {
        this.AddressTypeCombo = AddressTypeCombo;
    }
}
