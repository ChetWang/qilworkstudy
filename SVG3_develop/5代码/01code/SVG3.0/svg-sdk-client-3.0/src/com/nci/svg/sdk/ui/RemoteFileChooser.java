/*
 * RemoteFileChooser.java
 *
 * Created on 2008年8月12日, 上午9:00
 */
package com.nci.svg.sdk.ui;

import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import com.nci.svg.bean.RemoteFileInfoBean;
import com.nci.svg.sdk.client.EditorAdapter;
import com.nci.svg.sdk.logger.LoggerAdapter;

/**
 *
 * @author  yx.nci
 */
public class RemoteFileChooser extends javax.swing.JDialog {

    /**
     * 个性图
     */
    public static final int FILE_TYPE_PERSONAL = 1;
    /**
     * 标准图
     */
    public static final int FILE_TYPE_STANDARD = 2;
    /**
     * 系统图
     */
    public static final int FILE_TYPE_SYSTEM = 3;
    /**
     * 图类型
     */
    private int fileType;
    private EditorAdapter editor;
    private DefaultMutableTreeNode root;
    private DefaultTreeModel treeModel;

    /** Creates new form RemoteFileChooser */
    public RemoteFileChooser(EditorAdapter editor, boolean modal, int fileType) {
        super(editor.findParentFrame(), modal);
        this.fileType = fileType;
        this.editor = editor;
        initComponents();
        setLocationRelativeTo(editor.findParentFrame());
        setTitle("选择个性图");

    }

    public void initRemote() {
        fileTree.clearSelection();
        root = new DefaultMutableTreeNode("个性图");
        treeModel = new DefaultTreeModel(root);
        fileTree.setModel(treeModel);
        fileTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
//        root.removeAllChildren();
        ArrayList<RemoteFileInfoBean> remoteFiles = null;
        switch (fileType) {
            case FILE_TYPE_PERSONAL:
//                remoteFiles = editor.getSvgSession().getPersonalFileList(editor.getSvgSession().getUser());
                break;
            default:
                JOptionPane.showConfirmDialog(editor.findParentFrame(), "该类型未定义");
        }
        if (remoteFiles != null) {
            String typeNodeName = "";//分类的节点名，这里是电压等级
            DefaultMutableTreeNode typeNode = null;
            DefaultMutableTreeNode fileNode = null;
            for (RemoteFileInfoBean fileInfo : remoteFiles) {
                String typeName = fileInfo.getStrFileType();
                if (!typeNodeName.equals(typeName)) {
                    typeNodeName = typeName;
                    typeNode = new DefaultMutableTreeNode(typeNodeName);
                    root.add(typeNode);
                }
                fileNode = new DefaultMutableTreeNode(fileInfo);
                typeNode.add(fileNode);
            }
            fileTree.expandRow(0);
        }
    }

    public RemoteFileInfoBean getSelectedBean() {
        if (fileTree.getSelectionPath() == null)
            return null;
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) fileTree.getSelectionPath().getLastPathComponent();
        if (selectedNode.getUserObject() instanceof String) {
            return null;
        } else {
            return (RemoteFileInfoBean) selectedNode.getUserObject();
        }
    }

    /**
     * 打开选定的文件
     */
    private void open() {
        RemoteFileInfoBean bean = getSelectedBean();
        if (bean != null) {
//            editor.getSvgSession().getPersonalFile(bean.getStrID(), bean.getStrFileDesc());
            dispose();
        }
    }

    /**
     * 删除选定的文件
     */
    private void deleteSelectedFile() {
        RemoteFileInfoBean bean = this.getSelectedBean();
        //TODO 修改删除远程文件
        editor.getLogger().log(null, LoggerAdapter.ERROR, "远程删除还未定义，请补上！");
//        boolean result = new NCIEquipPropertyManager(editor).deleteRemotePersonalFile(bean);
        boolean result = true;
        if(result){
           DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) fileTree.getSelectionPath().getLastPathComponent();
           fileTree.clearSelection();
           ((DefaultMutableTreeNode)selectedNode.getParent()).remove(selectedNode);
           fileTree.updateUI();
        }
        JOptionPane.showConfirmDialog(editor.findParentFrame(), result==true?"删除成功！":"删除失败！", "结果", JOptionPane.CLOSED_OPTION, JOptionPane.INFORMATION_MESSAGE);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTree = new javax.swing.JTree();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okBtn.setText("确定");
        okBtn.setEnabled(false);
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("取消");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        fileTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileTreeMouseClicked(evt);
            }
        });
        fileTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                fileTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileTree);

        deleteBtn.setText("删除");
        deleteBtn.setEnabled(false);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(deleteBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 118, Short.MAX_VALUE)
                        .add(okBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelBtn)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {cancelBtn, deleteBtn, okBtn}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelBtn)
                    .add(okBtn)
                    .add(deleteBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
    open();
}//GEN-LAST:event_okBtnActionPerformed

private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
    dispose();
}//GEN-LAST:event_cancelBtnActionPerformed

private void fileTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_fileTreeValueChanged
    if (getSelectedBean() == null) {
        okBtn.setEnabled(false);
        deleteBtn.setEnabled(false);
    } else {
        okBtn.setEnabled(true);
        deleteBtn.setEnabled(true);
    }
}//GEN-LAST:event_fileTreeValueChanged

private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
    int result = JOptionPane.showConfirmDialog(editor.findParentFrame(), "确定删除?", "警告", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
    if (result == 0) {
        deleteSelectedFile();
    }
}//GEN-LAST:event_deleteBtnActionPerformed

private void fileTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileTreeMouseClicked
    if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
        open();
    }

}//GEN-LAST:event_fileTreeMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTree fileTree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables
}
